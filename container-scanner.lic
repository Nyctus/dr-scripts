custom_require.call(%w[common common-crafting common-items common-travel common-arcana])

class ContainerScanner

    def initialize

    arg_definitions = [
    [
        { name: 'preposition', regex: /\w+/, description: "Preposition or 'rummage' | Shadow Servant: use 'pg'" },
        { name: 'container', regex: /\w+/, description: 'Container to scan. Put multiple words in quotes (e.g. "my backpack" or "pouch on shelf"). For a Shadow Servant use \'servant\'' },
        { name: 'itemfind', regex: /\w+/i, optional: true, description: 'Name of item to find. Put multiple words in quotes. Not case-sensitive!' }
      ]
    ]

    args = parse_args(arg_definitions)

    @settings = get_settings

    # store args in variables
    preposition = args.preposition.downcase
    container = args.container.downcase

    # eddies are fussy and need to be referred to as 'portal'
    if container == 'eddy' then container = 'portal' end

    # construct the look string for a later bput
    lookstring = preposition + " " + container

    # generate the regex pattern if itemfind is specified
    if args.itemfind != nil then findpattern = Regexp.new(args.itemfind, Regexp::IGNORECASE) else findpattern = nil end

    # choose verb to use when scanning the container
    case preposition
    when 'rummage'
      lookverb = 'rummage'
    when /on|in|under|behind/
      lookverb = 'look'
    when 'pg'
      lookverb = 'pg'
    end

    # pattern used to subtract 'my' when looking in external containers
    no_my = Regexp.new(/my /)

    # depending on lookverb either use the patterns for external containers or containers in the player's inventory
    case lookverb
    when /look/
      /^#{preposition.capitalize} the.*#{container.gsub(no_my, '')} you see (?:an?|some) (.*)\.$/ =~ DRC.bput("#{lookverb} #{lookstring}", /^#{preposition.capitalize} the.*#{container.gsub(no_my, '')} you see (.*)\.$/)
      raw_list = $1
    when /rummage/
      /^You rummage through.*and see (?:an?|some) (.*)\.$/ =~ DRC.bput("#{lookstring}", /^You rummage through.*and see (?:an?|some) (.*)\.$/)
      raw_list = $1
    end

    # if the container is 'servant' instead generate the raw data via the peer_servant() method
    if container.downcase == 'servant'
      raw_list = peer_servant()
    end

    # parse the list into an array of strings and then sort
    itemlist = raw_list.split(/(?:,\s|\sand\s)(?:an?|some)\s/)
    itemlist = itemlist.sort_by { |item| item.downcase }
    listlength = itemlist.length

    # if 'itemfind' arg was specified, generate a second array of strings containing the search string
    foundlist = []
    if findpattern != nil
      for index in 0..(listlength - 1) do
        foundlist.push(itemlist[index]) if findpattern =~ itemlist[index]
      end
      itemlist = itemlist.sort_by { |item| item.downcase }
      itemlist = foundlist
      listlength = itemlist.length
    end

    # detect and label duplicate items
    previtem = ''
    for index in 0..(listlength - 1) do
      if previtem.include?(itemlist[index])
        previtem = itemlist[index]
        itemlist[index] = itemlist[index] + " (duplicate)"
      else
        previtem = itemlist[index]
      end
    end

    
    DRC.message("Showing #{itemlist.length} items matching regex: #{findpattern.to_s}") if findpattern != nil

    # if the list of items is not empty, print it out
    (itemlist.length > 0) ? print_list(itemlist) : respond('No results.')

    # if rummaging, update preposition so printed message makes sense
    if preposition == 'rummage' then preposition = 'in' end

    # if player is looking inside a personal or external container send this informative message
    DRC.message("There are #{listlength} items #{preposition} the #{container.gsub(no_my, '')}. This does not include items in sub-containers.") if findpattern == nil && preposition != 'pg'

    # if player is scanning a Shadow Servant send this informative message
    DRC.message("There are #{listlength} items in the #{container.gsub(no_my, '')}. This does not include items inside nested containers (i.e. gems in a pouch inside a backpack).") if findpattern == nil && preposition == 'pg'
  end

  # this method casts Piercing Gaze on the servant and collects the output into a string of comma separated values
  def peer_servant()

    # init an empty string
    servant_list = ''

    # check if servant is already summoned
    servant = DRC.bput('glance servant', /You glance at a/, /I could not/)

    # if servant is not summoned, summon it
    if servant =~ /I could not/
      DRCA.cast_spell({ 'abbrev' => 'ss', 'prep_time' => 5, 'mana' => 1}, @settings)
    end

    # cast Piercing Gaze on the servant to view its contents
    DRCA.cast_spell({ 'abbrev' => 'pg', 'mana' => 1, 'prep_time' => 1, 'cast' => 'cast servant'}, @settings)

    # wait for the first line of results
    waitfor /Within the belly of the Shadow Servant you see/

    # loop through every returned line from the game window to generate a comma separated list
    doloop = true
    while doloop
      servant_line = waitfor /^Your Servant is holding.*|.*/
      case servant_line
      when /^Your Servant is holding.*/
        # This match indicates the last line of results from the servant; break the loop
        doloop = false
      else
        # Append the string with the next item
        servant_list = servant_list + servant_line.lstrip + ", " unless servant_line == ''
      end
    end

    # Delete trailing comma and space
    servant_list.delete_suffix!(', ')

    # Return the raw string with all of the Shadow Servant's contents
    return servant_list
  end

  # first print out the array of unique items in the container, then print out the array of duplicate items
  def print_list(itemlist = [])
    listlength = itemlist.length
    for index in 0..(listlength - 1) do
      respond(itemlist[index]) if !itemlist[index].include?("\(duplicate\)")
    end
    respond('')
    for index in 0..(listlength - 1) do
      respond(itemlist[index]) if itemlist[index].include?("\(duplicate\)")
    end
  end
end

ContainerScanner.new
